0.7.1
=====
Hi this is a test line.
PEP8 styling fixes

Merge https://github.com/agoragames/haigha/pull/55 from @dizpers
Adds keyword argument passing to GeventPoolTransport constructor
from the Connection constructor.

0.7.0
=====

Adds `synchronous` keyword argument to `Connection` constructor, which makes
the connection behave as if it were synchronous, no matter the underlying
transport type. Useful for gevent where one does not want to use callbacks.
Applies to all channels, enforces `nowait=False` where applicable.

Adds `synchronous` keyword argument to `Connection.channel`, which makes the
`Channel` object synchronous independent of the underlying transport type.
For example, if a synchronous channel on an asynchronous transport has a
protocol method called with `nowait=False` (where applicable), then the method
will not return until the response frame has been read. Does not enforce
`nowait=False` where applicable.

Adds `synchronous_connect` option to Connection constructor which will enforce
synchronous behavior in `Connection.connect` regardless of the underlying
transport type. Improves features to handle issue #7. Also makes 
`Connection.close` synchronous. Defaults to True if transport is synchronous
or `synchronous=True` passed in constructor.
https://github.com/agoragames/haigha/issues/7

Standard and gevent socket transport will raise EnvironmentErrors that aren't
in `(errno.EAGAIN,errno.EWOULDBLOCK,errno.EINTR)`. Fixes notifying read loops
of potential problems and fixes #44
https://github.com/agoragames/haigha/issues/44

Immediately close connection and raise ConnectionClosed if there is a 
FrameError in reading frames from the broker in `Connection.read_frames`.

Detect frames that are larger than negotiated frame max in
`Connection.send_frame`, immediately close connection and raise 
ConnectionClosed.

Add property `Connection.closed`

0.6.2
=====

Raise ConnectionClosed in Connection.synchronous if the transport has
been cleared

0.6.1
=====

Merge https://github.com/agoragames/haigha/pull/35 from @xjdrew
Fix exception raising when there's an application error on a synchronous transport
Fixes synchronous return values from queue.declare
Adds an example synchronous RPC client and server

0.6.0
=====

Fixes #33, only accept (str,unicode,bytearray) as Message body types. Default 
to empty string.

0.5.12
======

Fixes #31 wherein a channel is closed on a synchronous transport while reading
frames and waiting for the synchronous callback to be executed.

0.5.11
======

Fixed writing headers if the type of a field is a subclass of the supported
native types

0.5.10
======

Fixed unexpected indent error.

0.5.9
=====

Support array lists in headers. Thanks to @joeyimbasciano
https://github.com/agoragames/haigha/pull/28


0.5.8
=====

Merge pull requests, suppresses DeprecationWarning in latest gevent.

0.5.7
=====

Fixed exception in handling in SocketTransport when sendall() raises a socket
error. Also fixed re-raise of exception on SocketTransport.read() so that it
always marks the transport as closed.

0.5.6
=====

Only catch Exception subclasses in Connection and Channel. Fixes issue #23.

Update to Chai 0.2.0


0.5.5
=====

Fixed bug in gevent transport connect parameter to socket transport


0.5.4
=====

Gevent transport can be used without monkey patching sockets

If there is an error in a channel close callback, don't fail in the second
call to Channel.close


0.5.3
=====

Added 'haigha.connections' to package. Thanks to @grncdr
https://github.com/agoragames/haigha/pull/16


0.5.2
=====

Added haigha.connections.RabbitConnection to support RabbitMQ-specific
features. This includes `auto_delete` and `internal` parameters to 
exchange.declare, exchange.bind, exchange.unbind, client side basic.nack,
and confirm.select to enable publisher confirms. See basic.set_ack_listener
and basic.set_nack_listener for handling the confirmations.
http://www.rabbitmq.com/blog/2011/02/10/introducing-publisher-confirms/

Removed `auto_delete` and `internal` parameters from common exchange.declare

Default transport is now the SocketTransport. This is unlikely to change again.

Implemented PEP 396.


0.5.1
=====

GeventTransport subclasses SocketTransport

In all cases, if a method has 'nowait' argument and an optional callback is
supplied, the method will execute as 'nowait=False', i.e. synchronously

Connection supplies Channels with the protocol mapping

Connection close_info is available if the connection is closed or disconnected

The reply_text in Channel.close is truncated to 255 characters when sent to
the broker

Fixed bug in Channel.clear_synchronous_cb which needs to return the argument
if no matching callback was found. This fixes a bug in ProtocolClass.dispatch.

Fix isinstance parameter ordering in Channel.SyncWrapper.__eq__


0.5.0
=====

Fix message reading in basic.get

Added optional open_cb kwarg to Connection constructor

Added optional callback to basic.consume for notifications when broker has
registered the consumer

Moved channel state out of ChannelClass and into Channel to fix access problems
after Channel has been cleaned up

Added support for Channel open notification listeners

All AMQP timestamps are in UTC

Most exceptions will now propagate to user code, fixing problems with 
gevent.GreenletExit and SystemExit

Preliminary support for synchronous clients


0.4.5
=====

Fix heartbeat support in event transport


0.4.4
=====

Fix handling of socket timeouts in gevent transport


0.4.3
=====

Client sends heartbeat frames on its own rather than simply replying to ones 
received from the broker


0.4.2
=====

Channel close listeners are now notified before channel local data is cleaned
up

Default to the gevent transport

Removed fixed requirements for libevent or gevent. It is now up to the user to
install the packages corresponding to their preferred transport.


0.4.1
=====

Added a write lock around GeventTransport.write() call to socket.sendall()


0.4.0
=====

Fixed handling of channel closures due to error. This cleaned up several DoS
vulnerabilities, including a lockup in the ChannelPool, unbounded memory 
consumption, and failure to re-use channel ids after max id enumerator
rolled over. Channel cleanup relies on reference counting to ensure a client
can respond to rapid opening and closing of channels.

Fixed failure to always cast GeventTransport.read() return to a bytearray,
which caused problems when reading partial frames.

Fixed failure in GeventTransport to switch to non-blocking socket after
connecting.

Fixed fetching of close_info when connection close callback executes.


0.3.4
=====

Abstracted libevent requirement and added support for gevent backend

Support non-blocking connect on libevent transport

Removed connection strategies from Connection and deleted ConnectionStrategy
class. Combined with a simplified and abstracted approach to IO and scheduling
in the Transports, the strategy for failed connections is more deterministic
and left in the hands of the user.


0.3.3
=====

Added cap to ChannelPool. This should be used to ensure that all of the broker
memory is consumed by channels in cases where it is slow to process 
transactions.

0.3.2
=====

Fixed calling into user-provided close callback, changed interface of close_cb
to accept no arguments

Use buffer-per-frame in Connection.send_frame() to work around a memory 
freeing problem in EventSocket

First round of in-depth documentation in DOCUMENTATION.rst

Added callbacks to Exchange.declare(), Exchange.delete() and 
Transaction.select().

Fixed FIFO ordering problems for all methods that support callbacks to user 
after a synchronous operation.


0.3.1
=====

Removed encoding of arrays as table fields


0.3.0
=====

Test coverage of all protocol and frame classes

Test coverage, bug fixes and minor performance improvements to Reader and 
Writer classes

Reader and Writer conform to RabbitMQ and QPid errata as documented
at http://dev.rabbitmq.com/wiki/Amqp091Errata#section_3. Added 
scripts/rabbit_table_test for integration testing.


0.2.3 
=====

First changelog.

Removed manipulation of channels in Connection.disconnect(). It's now
up to the application to manage channels when explicitly shutting down a
connection or when the socket is dropped and the strategy reconnects. This
fixed a problem wherein an application may have created a connection,
created some channels and queued operations on them, but it takes the
strategy a few attempts before completing a socket connection.

Fixed character escpaing when logging outbound ContentFrames.
